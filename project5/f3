F3          Assumptions and Tips:
F3          
F3          1.      Do not assume server and client have access to each other’s files. Assume they are on different machines and do not share file systems.
F3          
F3          2.      Do not change the message system (types, sizes, ports and so on). You may fix bugs and such.
F3          
F3          3.      You can use a single threaded server, it is easier. If you do that, think about how to do a multi-threaded server.
F3          
F3          Implementation strategies:
F3          
F3          1.      Design the project first; do not start writing code without knowing how you will handle messages, filenames, dialogs between client and server, and all that.
F3          
F3          2.      Make simplifying assumptions and start with simple implementations and then add features.
F3          
F3          3.      Test every step.
F3          
F3          4.      Note: This project is not simple and has many possibilities of programming issues/bugs. Please get started ASAP.
F3          
F3          TEST PROGRAM REQUIREMENTS
F3          
F3          [updated]
F3          
F3          The program that you submit will be structured as follows:
F3          
F3          1.      It is run from the command line, such as
F3          %  ./a.out 5 f1 f2 f3 f4 f5
F3          where 5 is the number of clients and f1…f5 are the files to transfer. You can assume the command line will be correct and you do not have to check for its structure (not checking is a security risk, but for this project it is ok).
F3          
F3          2.      If the number of clients is higher than 3 then if the transfer of any of the 3 files have not been completed then the 4th (or 5th) one will be rejected.
F3          
F3          3.      Each client transfers one file (once).
F3          
F3          4.      After a client finishes sending a file over the server it executes “while (1) sleep() //wrong, see discussion board;” – because the termination of threads have not been implemented.